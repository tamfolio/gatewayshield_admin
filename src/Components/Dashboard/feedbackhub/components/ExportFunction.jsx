import React, { useState } from 'react';
import { FiDownloadCloud } from 'react-icons/fi';
import { RefreshCw } from 'lucide-react';

const ExportFunction = ({ 
  dashboardData, 
  filters, 
  loading = false, 
  className = "",
  onExportStart,
  onExportComplete,
  onExportError
}) => {
  const [isExporting, setIsExporting] = useState(false);

  // Main export function - uses reliable text-based PDF
  const exportSimplifiedPDF = async () => {
    try {
      setIsExporting(true);
      onExportStart?.();

      // Dynamic import to reduce bundle size
      const { default: jsPDF } = await import('jspdf');
      const pdf = new jsPDF('p', 'mm', 'a4');

      // PDF configuration
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      const contentWidth = pageWidth - (margin * 2);
      let yPosition = margin;

      // Helper function to add text with proper formatting
      const addText = (text, fontSize = 12, isBold = false) => {
        pdf.setFontSize(fontSize);
        pdf.setFont('helvetica', isBold ? 'bold' : 'normal');
        
        const lines = pdf.splitTextToSize(text, contentWidth);
        lines.forEach(line => {
          if (yPosition > pageHeight - margin - 20) {
            pdf.addPage();
            yPosition = margin;
          }
          pdf.text(line, margin, yPosition);
          yPosition += fontSize * 0.6;
        });
        yPosition += 5;
      };

      // Add header
      addText('Feedback Dashboard Report', 24, true);
      addText(`Generated: ${new Date().toLocaleString()}`, 10);
      addText(`Time Range: ${filters.timeRange}`, 10);
      yPosition += 10;

      // Executive Summary
      addText('Executive Summary', 18, true);
      if (dashboardData) {
        const avgOfficer = dashboardData.averageOfficerRating?.toFixed(1) || 'N/A';
        const avgStation = dashboardData.averageStationRating?.toFixed(1) || 'N/A';
        const totalOfficers = (dashboardData.topPerformingOfficers?.length || 0) + 
                             (dashboardData.bottomPerformingOfficers?.length || 0);
        const totalStations = (dashboardData.topPerformingStations?.length || 0) + 
                             (dashboardData.bottomPerformingStations?.length || 0);

        addText(`• Average Officer Rating: ${avgOfficer} stars`);
        addText(`• Average Station Rating: ${avgStation} stars`);
        addText(`• Total Officers Evaluated: ${totalOfficers}`);
        addText(`• Total Stations Evaluated: ${totalStations}`);
      } else {
        addText('No dashboard data available for this time period.');
      }
      yPosition += 10;

      // Helper function to add a section
      const addSection = (title, data, nameField = 'name') => {
        if (!data || data.length === 0) return;
        
        addText(title, 16, true);
        data.forEach((item, index) => {
          const name = item[nameField] || item.officerName || item.stationName || 'Unknown';
          const rating = (item.value || item.avgRating || 0).toFixed(1);
          addText(`${index + 1}. ${name}: ${rating} stars`);
        });
        yPosition += 8;
      };

      // Add all sections
      addSection('Top Performing Officers', dashboardData?.topPerformingOfficers);
      addSection('Top Performing Stations', dashboardData?.topPerformingStations);
      addSection('Officers Requiring Attention', dashboardData?.bottomPerformingOfficers);
      addSection('Stations Requiring Attention', dashboardData?.bottomPerformingStations);

      // Add footer
      const totalPages = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setFont('helvetica', 'normal');
        pdf.text('Generated by Feedback Dashboard System', margin, pageHeight - 15);
        pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 30, pageHeight - 15);
      }

      // Save the PDF
      const fileName = `feedback-dashboard-${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(fileName);

      onExportComplete?.(fileName);
    } catch (error) {
      console.error('PDF Export Error:', error);
      onExportError?.(error.message);
    } finally {
      setIsExporting(false);
    }
  };

  // Visual export function - experimental
  const exportVisualPDF = async () => {
    try {
      setIsExporting(true);
      onExportStart?.();

      // Dynamic imports
      const { default: jsPDF } = await import('jspdf');
      const { default: html2canvas } = await import('html2canvas');

      // Find dashboard element
      const dashboardElement = document.querySelector('[data-export="dashboard"]') ||
                              document.querySelector('.max-w-7xl .bg-white.rounded-lg.shadow-sm') ||
                              document.querySelector('.max-w-7xl');

      if (!dashboardElement) {
        throw new Error('Dashboard element not found. Add data-export="dashboard" to your main container.');
      }

      // Create export container
      const exportContainer = document.createElement('div');
      Object.assign(exportContainer.style, {
        position: 'fixed',
        left: '-9999px',
        top: '0',
        width: '1200px',
        backgroundColor: '#ffffff',
        padding: '40px',
        fontFamily: 'Arial, sans-serif',
        color: '#000000',
        zIndex: '-1000'
      });

      // Add header
      const header = document.createElement('div');
      Object.assign(header.style, {
        marginBottom: '30px',
        textAlign: 'center',
        borderBottom: '2px solid #333',
        paddingBottom: '20px'
      });
      header.innerHTML = `
        <h1 style="margin: 0; font-size: 28px; color: #333; font-weight: bold;">
          Feedback Dashboard Report
        </h1>
        <p style="margin: 10px 0 5px 0; color: #666; font-size: 14px;">
          Generated: ${new Date().toLocaleString()}
        </p>
        <p style="margin: 0; color: #666; font-size: 14px;">
          Time Range: ${filters.timeRange}
        </p>
      `;

      // Clone and clean dashboard
      const clonedElement = dashboardElement.cloneNode(true);
      
      // Remove interactive elements
      const interactiveSelectors = [
        'button', 
        '.cursor-pointer', 
        '[role="button"]',
        '.hover\\:bg-gray-50',
        '.transition-colors'
      ];
      
      interactiveSelectors.forEach(selector => {
        clonedElement.querySelectorAll(selector).forEach(el => {
          if (el.textContent?.includes('Export') || 
              el.textContent?.includes('Refresh') || 
              el.textContent?.includes('Filter')) {
            el.remove();
          }
        });
      });

      // Remove header controls
      const headerControls = clonedElement.querySelector('.flex.items-center.justify-between .flex.items-center.gap-4');
      if (headerControls) headerControls.remove();

      // Append to container
      exportContainer.appendChild(header);
      exportContainer.appendChild(clonedElement);
      document.body.appendChild(exportContainer);

      // Clean up styles for PDF
      clonedElement.querySelectorAll('*').forEach(el => {
        Object.assign(el.style, {
          transition: 'none',
          animation: 'none',
          transform: 'none'
        });
      });

      // Wait for rendering
      await new Promise(resolve => setTimeout(resolve, 500));

      // Create canvas
      const canvas = await html2canvas(exportContainer, {
        scale: 2,
        useCORS: true,
        backgroundColor: '#ffffff',
        logging: false,
        ignoreElements: (element) => {
          return element.tagName === 'SCRIPT' || 
                 element.tagName === 'STYLE' ||
                 element.classList?.contains('animate-spin');
        }
      });

      // Clean up
      document.body.removeChild(exportContainer);

      // Create PDF
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgData = canvas.toDataURL('image/png', 1.0);
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      // Add pages
      let heightLeft = imgHeight;
      let position = 0;
      
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      // Save
      const fileName = `feedback-dashboard-visual-${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(fileName);

      onExportComplete?.(fileName);
    } catch (error) {
      console.error('Visual PDF Export Error:', error);
      onExportError?.(`Visual export failed: ${error.message}`);
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <div className={`flex items-center gap-2 ${className}`}>
      {/* Main Export Button - Reliable */}
      <button
        onClick={exportSimplifiedPDF}
        disabled={loading || isExporting || !dashboardData}
        className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
      >
        {isExporting ? (
          <RefreshCw className="w-4 h-4 animate-spin" />
        ) : (
          <FiDownloadCloud className="w-4 h-4" />
        )}
        {isExporting ? 'Generating PDF...' : 'Export PDF'}
      </button>

      {/* Visual Export Button - Experimental */}
      <button
        onClick={exportVisualPDF}
        disabled={loading || isExporting || !dashboardData}
        className="flex items-center gap-1 px-3 py-2 text-xs font-medium text-blue-700 bg-blue-50 border border-blue-300 rounded-md hover:bg-blue-100 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
        title="Export with visual charts (may fail on some browsers)"
      >
        {isExporting ? (
          <RefreshCw className="w-3 h-3 animate-spin" />
        ) : (
          <span className="text-sm">📸</span>
        )}
        Visual
      </button>
    </div>
  );
};

export default ExportFunction;